# Simplified production deployment for testing
services:
  # Demo Application Backend (simple nginx)
  demo-backend:
    image: nginx:alpine
    container_name: keystone-demo-simple
    restart: unless-stopped
    ports:
      - "3001:80"
    volumes:
      - ./mock-backends/demo:/usr/share/nginx/html:ro
      - ./mock-backends/demo/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # API Service Backend (Node.js)
  api-backend:
    image: node:18-alpine
    container_name: keystone-api-simple
    restart: unless-stopped
    ports:
      - "3002:3000"
    working_dir: /app
    volumes:
      - ./mock-backends/api:/app:ro
    command: node server.js
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Keystone Gateway - Main Application
  keystone-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: keystone-gateway-simple
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./configs/production-working.yaml:/app/configs/config.yaml:ro
    environment:
      - ENV=production
      - LOG_LEVEL=info
    networks:
      - keystone-network
    depends_on:
      - api-backend
      - demo-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik for SSL (simplified)
  traefik:
    image: traefik:v3.0
    container_name: traefik-simple
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=kontakt@keystone-gateway.dev"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
    ports:
      - "8081:80"   # Use 8081 instead of 80
      - "8443:443"  # Use 8443 instead of 443  
      - "8888:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - keystone-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keystone-gateway.rule=Host(`demo.keystone-gateway.dev`) || Host(`api.keystone-gateway.dev`)"
      - "traefik.http.routers.keystone-gateway.entrypoints=websecure"
      - "traefik.http.routers.keystone-gateway.tls.certresolver=letsencrypt"
      - "traefik.http.routers.keystone-gateway.service=keystone-gateway"
      - "traefik.http.services.keystone-gateway.loadbalancer.server.port=8080"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

volumes:
  letsencrypt:
    driver: local

networks:
  keystone-network:
    driver: bridge
    name: keystone-network-simple
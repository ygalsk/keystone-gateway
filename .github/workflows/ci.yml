name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop, todo-branch ]
  pull_request:
    branches: [ main, staging, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22, 1.23]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run linting
      run: make lint

    - name: Run unit tests
      run: make test

    - name: Run integration and e2e tests
      run: |
        go test ./tests/integration/...
        go test ./tests/e2e/...

    - name: Run unit tests with race detection
      run: go test -race ./tests/unit/...

    - name: Generate test coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: make security

    # Note: SARIF uploads removed as we're using simple security scanning via Makefile

    # Note: Trivy scanning removed - can be re-added if needed with proper SARIF output

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, security, benchmark]
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22

    - name: Build keystone-gateway
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        BINARY_NAME="keystone-gateway-${{ matrix.goos }}-${{ matrix.goarch }}"

        # Cross-compile for the target platform
        go build -o dist/${BINARY_NAME} ./cmd

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, benchmark]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22

    - name: Build Docker image
      run: make docker

  # Note: Deployment jobs removed as staging and production targets don't exist in Makefile
  # Add these back when deployment infrastructure is set up

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release archives
      run: |
        mkdir -p release
        cd artifacts
        for dir in binaries-*/; do
          if [ -d "$dir" ]; then
            os_arch=$(echo "$dir" | sed 's/binaries-//' | sed 's/\///')
            tar czf "../release/keystone-gateway-${os_arch}.tar.gz" -C "$dir" .
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.tar.gz
        generate_release_notes: true

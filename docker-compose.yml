version: '3.8'

services:

  keystone-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: keystone-gateway
    ports:
      - "8080:8080"
    networks:
      - keystone-network
    depends_on:
      - api-backend
      - auth-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    environment:
      - SOME_ENV_VAR=value  # Add env vars if needed

  # Demo Application Backend
  demo-backend:
    image: nginx:alpine
    container_name: keystone-demo
    ports:
      - "3001:80"
    volumes:
      - ./mock-backends/demo:/usr/share/nginx/html:ro
      - ./mock-backends/demo/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    labels:
      - "keystone.service=demo"
      - "keystone.tenant=demo"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # API Service Backend
  api-backend:
    image: node:18-alpine
    container_name: keystone-api
    ports:
      - "3002:3000"
    working_dir: /app
    volumes:
      - ./mock-backends/api:/app:ro
    command: node server.js
    labels:
      - "keystone.service=api"
      - "keystone.tenant=api"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    environment:
      - NODE_ENV=production
      - PORT=3000

  # Authentication Service Backend
  auth-backend:
    image: node:18-alpine
    container_name: keystone-auth
    ports:
      - "3003:3000"
    working_dir: /app
    volumes:
      - ./mock-backends/auth:/app:ro
    command: node server.js
    labels:
      - "keystone.service=auth"
      - "keystone.tenant=auth"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    environment:
      - NODE_ENV=production
      - PORT=3000

  # Status/Monitoring Backend
  status-backend:
    image: nginx:alpine
    container_name: keystone-status
    ports:
      - "3004:80"
    volumes:
      - ./mock-backends/status:/usr/share/nginx/html:ro
      - ./mock-backends/status/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    labels:
      - "keystone.service=status"
      - "keystone.tenant=status"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Grafana Backend (for monitoring)
  grafana-backend:
    image: grafana/grafana:latest
    container_name: keystone-grafana
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.keystone-gateway.dev
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./mock-backends/grafana/provisioning:/etc/grafana/provisioning:ro
    labels:
      - "keystone.service=grafana"
      - "keystone.tenant=grafana"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for session storage (used by auth service)
  redis:
    image: redis:7-alpine
    container_name: keystone-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for demo app data
  postgres:
    image: postgres:15-alpine
    container_name: keystone-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=keystonedb
      - POSTGRES_USER=keystone
      - POSTGRES_PASSWORD=keystone123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./mock-backends/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keystone -d keystonedb"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  grafana-storage:
    driver: local
    labels:
      - "keystone.volume=grafana"
  redis-data:
    driver: local
    labels:
      - "keystone.volume=redis"
  postgres-data:
    driver: local
    labels:
      - "keystone.volume=postgres"

networks:
  keystone-network:
    driver: bridge
    name: keystone-network
    ipam:
      config:
        - subnet: 172.31.0.0/16
    labels:
      - "keystone.network=main"
